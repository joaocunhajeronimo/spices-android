continue
exit
Spices.instance.query('tableViewCell', :isSelected)
Spices.instance.query('tableViewCell', :class)
Spices.instance.query('tableViewCell', :alpha)
Spices.instance.query('tableViewCell')[3]['selected']
Spices.instance.query('tableViewCell')['selected']
Spices.instance.query('tableViewCell', :enabled)
Spices.instance.query('tableViewCell')[3]
Spices.instance.query('tableViewCell')[2]
Spices.instance.query('tableViewCell').first
Spices.instance.query('tableViewCell', :highlighted)
Spices.instance.query('tableViewCell', :selected)
Spices.instance.query('tableViewCell')
query('tableViewCell')
query_properties(:selected)
query_properties(:visible)
query_properties(:label)
query_properties(:description)
query_properties(:class)
query_properties(:frame)
query_properties(:selected)
query
query_properties :selected
continue
cell.visible?
cell
continue
cell = cells
cells
continue
cell.visible?
cell
exit
cell.visible?
cell
exit
TableView.with_accessibility_label('Text_TableView').table_view_cell.with_descendants [text_label]
TableView.with_accessibility_label('Text_TableView').table_view_cell
TableView.with_accessibility_label('Text_TableView')
cell
exit
query('tableView', :accessibilityLabel)
query('tableView', :label)
query('tableView')
exit
element_exists("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' descendant label {text = 'Titouan'} parent view:'_UIAlertControllerView'")
element_exists("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' descendant label {text = 'Titoua'} parent view:'_UIAlertControllerView'")
element_exists("view:'_UIAlertControllerView' label {text = 'Hell'} parent view:'_UIAlertControllerView' descendant label {text = 'Titouan'} parent view:'_UIAlertControllerView'")
element_exists("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' descendant label {text = 'Titoua'} parent view:'_UIAlertControllerView'")
element_exists("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' descendant label {text = 'Titouan'} parent view:'_UIAlertControllerView'")
query("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' descendant label {text = 'Titouan'} parent view:'_UIAlertControllerView'")
query("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' descendant label {text = 'Titouan'}")
query("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView' label {text = 'Titouan'}")
query("view:'_UIAlertControllerView' label {text = 'Hello'} parent view:'_UIAlertControllerView'")
query("view:'_UIAlertControllerView' label {text = 'Hello'}")
query("view:'_UIAlertControllerView' label {text = 'Hello'} parent")
query("view:'_UIAlertControllerView' label {text = 'Hello'}")
query("view:'_UIAlertControllerView' (label {text = 'Hello'} label {text = 'Titouan'})")
query("view:'_UIAlertControllerView' label {text = 'Hello'}")
query("view:'_UIAlertControllerView'", :subviews[1])
query("view:'_UIAlertControllerView'", :subviews[0])
query("view:'_UIAlertControllerView'", :subviews, :0)
query("view:'_UIAlertControllerView'", :subviews, ;0)
query("view:'_UIAlertControllerView'", :subviews)
query("view:'_UIAlertControllerView'")
exit
query("view:'_UIAlertControllerView' label {text CONTAINS 'Hello'}")
query("view:'_UIAlertControllerView' label {text CONTAINS 'Titouan'}")
query("view:'_UIAlertControllerView' label")[3]
query("view:'_UIAlertControllerView' label")[1]
query("view:'_UIAlertControllerView' label")[0]
query("view:'_UIAlertControllerView' label").count
query("view:'_UIAlertControllerView' label")
query("view:'_UIAlertControllerView'", :accessibilityLabel)
query("view:'_UIAlertControllerView'", :text)
query("view:'_UIAlertControllerView'", :frame)
query("view:'_UIAlertControllerView', :label")
query("view:'_UIAlertControllerView'", :label)
pp
query("view:'_UIAlertControllerView'")
a.query_string
a=Alert.with_title_and_msg('Hello', 'Titouan')
Alert.methods
exit
b.touch
b = TabbarButton.with_accessibility_label('Second')
b = TabbarButton.with_accessibility_label('Second').query
b = TabbarButton.with_accessibility_label('Second')
query('tabBarButton label', :accessibilityLabel)
query('tabBarButton label', :text)
query('tabBarButton', :text)
query('tabBarButton')
query('*')
exit
TabbarButton.with_text('Second').query
TabbarButton.with_text('Second')
TabbarButton
